name: Validate Data Schema

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'data/**/*.json'
      - 'data/schemas/**/*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'data/**/*.json'
      - 'data/schemas/**/*.json'

jobs:
  validate-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema pydantic
        
    - name: Validate Commands JSON
      run: |
        python -c "
        import json
        import jsonschema
        
        # Load schema and data
        with open('data/schemas/command_validation.schema.json', 'r') as f:
            schema = json.load(f)
        with open('data/commands.json', 'r') as f:
            data = json.load(f)
            
        # Validate
        try:
            jsonschema.validate(data, schema)
            print('✅ commands.json validation passed')
        except jsonschema.ValidationError as e:
            print(f'❌ commands.json validation failed: {e.message}')
            print(f'Path: {e.absolute_path}')
            exit(1)
        "
        
    - name: Validate Playbooks JSON
      run: |
        python -c "
        import json
        import jsonschema
        
        # Load schema and data
        with open('data/schemas/playbook_validation.schema.json', 'r') as f:
            schema = json.load(f)
        with open('data/playbooks.json', 'r') as f:
            data = json.load(f)
            
        # Validate
        try:
            jsonschema.validate(data, schema)
            print('✅ playbooks.json validation passed')
        except jsonschema.ValidationError as e:
            print(f'❌ playbooks.json validation failed: {e.message}')
            print(f'Path: {e.absolute_path}')
            exit(1)
        "
        
    - name: Validate TL1 Command Syntax
      run: |
        python -c "
        import json
        import re
        
        with open('data/commands.json', 'r') as f:
            data = json.load(f)
            
        # TL1 command pattern validation
        tl1_pattern = r'^[A-Z]{3,4}-[A-Z0-9-_]+::'
        
        errors = []
        for cmd in data['commands']:
            if not re.match(tl1_pattern, cmd['syntax']):
                errors.append(f\"Command '{cmd['id']}' has invalid TL1 syntax: {cmd['syntax']}\")
                
        if errors:
            print('❌ TL1 syntax validation failed:')
            for error in errors:
                print(f'  - {error}')
            exit(1)
        else:
            print('✅ TL1 command syntax validation passed')
        "
        
    - name: Check Data Consistency
      run: |
        python -c "
        import json
        
        # Load data files
        with open('data/commands.json', 'r') as f:
            commands = json.load(f)
        with open('data/playbooks.json', 'r') as f:
            playbooks = json.load(f)
            
        # Check command references in playbooks
        command_ids = set(cmd['id'] for cmd in commands['commands'])
        errors = []
        
        for playbook in playbooks['playbooks']:
            for step in playbook['commands']:
                # Extract command ID from TL1 syntax (first part before ::)
                cmd_part = step['command'].split('::')[0]
                cmd_id = cmd_part.replace('-', '_').upper()
                
                # Check if referenced command exists
                if cmd_id not in command_ids:
                    # Only warn for non-standard commands
                    print(f\"⚠️  Warning: Playbook '{playbook['id']}' step {step['step']} references unknown command: {cmd_id}\")
                    
        print('✅ Data consistency check completed')
        "
        
    - name: Validate JSON Structure
      run: |
        python -c "
        import json
        import os
        
        json_files = [
            'data/commands.json',
            'data/playbooks.json',
            'data/shared/alarms/alarm_map.json',
            'data/shared/nlp/intents.json',
            'data/shared/policies/safety_rules.json'
        ]
        
        for file_path in json_files:
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r') as f:
                        json.load(f)
                    print(f'✅ {file_path} is valid JSON')
                except json.JSONDecodeError as e:
                    print(f'❌ {file_path} has invalid JSON: {e}')
                    exit(1)
            else:
                print(f'⚠️  {file_path} not found, skipping')
        "