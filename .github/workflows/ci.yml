name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx pytest-cov
    
    - name: Validate data schemas
      run: |
        python scripts/validate_schemas.py
    
    - name: Run Python tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: codecov-python
        fail_ci_if_error: false

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webui/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./webui
      run: npm ci
    
    - name: Lint frontend code
      working-directory: ./webui
      run: npm run lint
    
    - name: Type check frontend
      working-directory: ./webui
      run: npm run type-check
    
    - name: Build frontend
      working-directory: ./webui
      run: npm run build
    
    - name: Run frontend tests
      working-directory: ./webui
      run: npm test

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webui/package-lock.json
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install and build frontend
      working-directory: ./webui
      run: |
        npm ci
        npm run build
    
    - name: Start backend server
      run: |
        cd src/webapi && python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/api/health || exit 1
        curl -f http://localhost:8000/api/commands || exit 1
        curl -f http://localhost:8000/api/commands/categories || exit 1
    
    - name: Test frontend build
      run: |
        test -f webui/dist/index.html || exit 1

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Python security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
    
    - name: Run frontend security audit
      working-directory: ./webui
      run: |
        npm audit --audit-level moderate

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt
    
    - name: Check Python code formatting
      run: |
        black --check src tests
    
    - name: Check Python import sorting
      run: |
        isort --check-only src tests
    
    - name: Lint Python code
      run: |
        flake8 src tests --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Type check Python code
      run: |
        mypy src --ignore-missing-imports

  release:
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend, integration-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false